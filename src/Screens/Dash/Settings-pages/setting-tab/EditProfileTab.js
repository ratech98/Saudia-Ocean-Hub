/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React, { useState } from "react";
import {
  Tooltip,
  Button,
  TextField,
  Grid,
  Typography,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  MenuItem,
} from "@mui/material";
import { styled } from "@mui/material/styles";
import { animated, useSpring, easings } from "react-spring";
import IMAGES from "../../../Images";
import { Card, Col, Container, Row } from "react-bootstrap";
import { withStyles } from "@mui/styles";
import { useFormik } from "formik";
import { countryCodeJson } from "../../../Auth/countryCodeJson";

const start_space_Validation = new RegExp(/^(?!\s).*/);
const emailIdValidation = new RegExp(
  /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$/i
);

const CustomTextField = withStyles({
  root: {
    "& input::placeholder": {
      fontSize: "16px",
      color: "rgba(66, 70, 81, 0.4)",
      fontFamily: "Poppins",
    },
  },
})(TextField);

const TypeQuest = animated(
  styled("div")(({ theme }) => ({
    // backgroundColor: `rgba(250, 250, 250, 1)`,
    backgroundColor: "#ffffff",
    boxShadow: `0px 4px 8px rgba(0, 0, 0, 0.16)`,
    borderRadius: `8px`,
    display: `flex`,
    // position: `relative`,
    // isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    // overflow: `hidden`,
    height: "auto",
    width: "100%", // Set the width to 300px
  }))
);

const ImageFrame = styled("div")({
  display: `flex`,
  // position: `relative`,
  // isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  //   padding: `10px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Image1 = animated(
  styled("div")({
    backgroundPosition: `center`,
    // backgroundSize: `contain`,
    backgroundSize: `cover`,
    backgroundRepeat: `no-repeat`,
    // borderTopLeftRadius: `6px`,
    display: `flex`,
    // position: `relative`,
    // isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    alignSelf: `stretch`,
    height: `251px`,
    margin: `0px`,
    border: `solid 0.5px rgba(66, 70, 81, 0.2)`,
    backgroundColor: "whitesmoke",
    borderRadius: `8px`,
  })
);

const Content = styled("div")({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `10px 20px 35px 20px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Details = styled("div")({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const TitleTop = styled("div")({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `space-between`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Title = animated(
  styled("div")(({ theme }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    fontSynthesis: `none`,
    // color: theme.palette["Text"]["Primary"],
    fontStyle: `bold`,
    // fontFamily: `Poppins`,
    fontWeight: `700`,
    fontSize: `26px`,
    letterSpacing: `normal`,
    // textDecoration: `underline`,
    textTransform: `none`,
    margin: `0px`,
    color: `#424651`,
    lineHeight: "1.5",
  }))
);

const SubTitle = animated(
  styled("div")(({ theme }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    fontSynthesis: `none`,
    // color: theme.palette["Text"]["Primary"],
    fontStyle: `bold`,
    // fontFamily: `Poppins`,
    fontWeight: `normal`,
    fontSize: `20px`,
    letterSpacing: `normal`,
    // textDecoration: `underline`,
    textTransform: `none`,
    margin: `0px`,
    color: `rgba(66, 70, 81, 0.6)`,
    lineHeight: "1.5",
  }))
);

const Q3Dots = animated(
  styled("div")({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    width: `4px`,
    height: `20px`,
    margin: `0px`,
  })
);

const Rectangle1 = styled("div")(({ theme }) => ({
  //   backgroundColor: theme.palette["Text"]["Primary"],
  borderRadius: `10px`,
  width: `4px`,
  height: `4px`,
  position: `absolute`,
  left: `0px`,
  top: `0px`,
}));

const Rectangle2 = styled("div")(({ theme }) => ({
  //   backgroundColor: theme.palette["Text"]["Primary"],
  borderRadius: `10px`,
  width: `4px`,
  height: `4px`,
  position: `absolute`,
  left: `0px`,
  top: `8px`,
}));

const Rectangle3 = styled("div")(({ theme }) => ({
  //   backgroundColor: theme.palette["Text"]["Primary"],
  borderRadius: `10px`,
  width: `4px`,
  height: `4px`,
  position: `absolute`,
  left: `0px`,
  top: `16px`,
}));

const Details1 = animated(
  styled("div")(({ theme }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    fontSynthesis: `none`,
    // color: theme.palette["Text"]["Primary"],
    fontStyle: `normal`,
    fontFamily: `Heebo`,
    fontWeight: `400`,
    fontSize: `16px`,
    letterSpacing: `0.15000000596046448px`,
    textDecoration: `none`,
    lineHeight: `150%`,
    textTransform: `none`,
    alignSelf: `stretch`,
    margin: `12px 0px 0px 0px`,
  }))
);

const ButtonContained = animated(
  styled(Button)({
    // margin: `26px 0px 0px 0px`,
    backgroundColor: "#3973a5",
    // textAlign: `left`,
    whiteSpace: `pre-wrap`,
    fontSynthesis: `none`,
    fontStyle: `bold`,
    fontSize: "20px",
    fontFamily: `Poppins`,
    fontWeight: `normal`,
    letterSpacing: `normal`,
    textTransform: `none`,
    lineHeight: "1.5",
    color: "#f6f6f6",
    borderRadius: "10px",
    padding: "16px 80px",
    width: `auto`,
  })
);

export const EditProfileTab = ({
  boatName,
  marine_city = "city",
  starRating = 0,
  priceCurrency = "SAR",
  pricePerHour = 0,
  boatMaxCapacity = "1",
  profile_image,
}) => {
  const [selectedCountry, setSelectedCountry] = useState(countryCodeJson[189]); // Set the initial selected country
  const [showModal, setShowModal] = useState(false);
  const [searchValue, setSearchValue] = useState("");

  const [TypeQuestSpring, TypeQuestApi] = useSpring(() => ({
    config: {
      duration: 100,
      easing: easings["easeOutBack"],
    },
    delay: 0,
    from: { transform: "scale(1)" },
  }));

  const [Image1Spring, Image1Api] = useSpring(() => ({
    config: {
      duration: 750,
      easing: easings["easeInOutQuint"],
    },
    delay: 1000,
    from: { transform: "scale(0.9)", opacity: 0 },
  }));

  const [TitleSpring, TitleApi] = useSpring(() => ({
    config: {
      duration: 500,
      easing: easings["easeInOutExpo"],
    },
    delay: 1250,
    from: { transform: "translateX(25px)", opacity: 0 },
  }));

  const [Q3DotsSpring, Q3DotsApi] = useSpring(() => ({
    config: {
      duration: 500,
      easing: easings["easeOutExpo"],
    },
    delay: 1250,
    from: { opacity: 0 },
  }));

  const [Details1Spring, Details1Api] = useSpring(() => ({
    config: {
      duration: 500,
      easing: easings["easeInOutExpo"],
    },
    delay: 1500,
    from: { transform: "translateY(15px)", opacity: 0 },
  }));

  const [ButtonContainedSpring, ButtonContainedApi] = useSpring(() => ({
    config: {
      duration: 500,
      easing: easings["easeInOutExpo"],
    },
    delay: 1750,
    from: { transform: "translateY(15px)", opacity: 0 },
  }));

  React.useEffect(() => {
    Image1Api.start({
      ...{ transform: "scale(1)", opacity: 1 },
      delay: 1000,
      config: { duration: 750 },
    });
    TitleApi.start({
      ...{ transform: "translateX(0px)", opacity: 1 },
      delay: 1250,
      config: { duration: 500 },
    });
    Q3DotsApi.start({
      ...{ opacity: 1 },
      delay: 1250,
      config: { duration: 500 },
    });
    Details1Api.start({
      ...{ transform: "translateY(0px)", opacity: 1 },
      delay: 1500,
      config: { duration: 500 },
    });
    ButtonContainedApi.start({
      ...{ transform: "translateY(0px)", opacity: 1 },
      delay: 1750,
      config: { duration: 500 },
    });
  }, []);

  let errors = {};
  const formik = useFormik({
    initialValues: {
      firstName: "",
      lastName: "",
      city: "",
      cellNo: "",
      email: "",
    },

    onSubmit: (values) => {
      handleSubmit(values);
    },

    validate: (values) => {
      if (!values.firstName) {
        errors.firstName = "Please enter first name";
      }
      if (!values.lastName) {
        errors.lastName = "Please enter last name";
      }

      if (!values.city) {
        errors.city = "Please enter your city name";
      }

      if (!values.cellNo) {
        errors.cellNo = "Please enter your phone number";
      }
      if (values.email === "") {
        errors.email = "Please enter your email";
      } else if (!values.email.match(emailIdValidation)) {
        errors.email = "Invalid email address";
      }

      return errors;
    },
  });

  const handleSubmit = async (value) => {
    console.log("type", value);

    formik.setErrors({});
  };

  const handleCountryChange = (values) => {
    const countryCode = values;
    const selectedCountry = countryCodeJson.find(
      (country) => country.code === countryCode
    );
    setSelectedCountry(selectedCountry);
    setShowModal(false);
  };

  const handleCountryCodeClick = () => {
    setShowModal(true);
  };
  const handleCloseModal = () => {
    setShowModal(false);
  };

  const handleSearchChange = (event) => {
    setSearchValue(event.target.value);
  };

  const filteredCountries = countryCodeJson.filter((country) =>
    country.name.en.toLowerCase().includes(searchValue.toLowerCase())
  );

  return (
    <>
      <form onSubmit={formik.handleSubmit}>
        <Row
          style={{
            backgroundColor: "white",
            width: "100%",
            height: "100%",
            margin: "0px 0px",
            padding: "50px 0px",
          }}
        >
          <Col
            lg={6}
            mb={4}
            mb-lg={0}
            style={{
              display: "flex",
              width: "100%",
              margin: "0px",
              padding: "0px",
            }}
          >
            <Container
              style={{
                height: "100%",
                borderRadius: "0",

                // margin: "0px",
                // padding: "0px",
                // padding: "80px 200px",
              }}
            >
              <Row>
                <Col
                  md={3}
                  className="gradient-custom text-center"
                  style={{
                    margin: "0px",
                    padding: "0px",
                  }}
                >
                  <Card.Body
                    className="p-4 align-items-center justify-content-center"
                    style={{
                      width: "100%",
                      height: "100%",
                      alignItems: "center",
                      alignContent: "center",
                      justifyContent: "center",
                      alignSelf: "center",
                      margin: "0px",
                      padding: "0px",
                    }}
                  >
                    <img
                      src={IMAGES?.PROFILE_ICON}
                      alt="Avatar"
                      // className="my-5"
                      style={{ width: "100px" }}
                    />
                  </Card.Body>
                </Col>
                <Col
                  md={8}
                  style={{
                    margin: "0px",
                    padding: "0px",
                  }}
                >
                  <Card.Body
                    className="p-4 align-items-center justify-content-center"
                    style={{
                      width: "100%",
                      height: "100%",
                      alignItems: "center",
                      alignContent: "center",
                      justifyContent: "center",
                      alignSelf: "center",
                      margin: "0px",
                      padding: "0px",
                    }}
                  >
                    <Row pt={1}>
                      <Col xs={6} mb={3}>
                        <Grid
                          item
                          xs={12}
                          sm={5.8}
                          style={{
                            alignSelf: "center",
                          }}
                        >
                          <CustomTextField
                            label={"First Name"}
                            variant="standard"
                            margin="normal"
                            fullWidth
                            id="firstName"
                            name="firstName"
                            placeholder="First Name"
                            value={formik.values.firstName}
                            onChange={(event) => {
                              const inputValue = event.target.value;
                              if (start_space_Validation.test(inputValue)) {
                                formik.setFieldValue("firstName", inputValue);
                              }
                            }}
                            error={
                              formik.touched.firstName &&
                              Boolean(formik.errors.firstName)
                            }
                            helperText={
                              formik.touched.firstName &&
                              formik.errors.firstName
                            }
                            InputProps={{
                              disableUnderline: true,
                              style: {
                                marginTop: "30px",
                              },
                            }}
                            InputLabelProps={{
                              shrink: true,
                              style: lable_text,
                            }}
                            inputProps={{
                              style: {
                                ...input_text,
                                border:
                                  formik.touched.firstName &&
                                  Boolean(formik.errors.firstName)
                                    ? "solid 1px #DC143C"
                                    : "solid 1px rgba(66, 70, 81, 0.2)",
                              },
                            }}
                            style={{
                              margin: "0px",
                              borderRadius: "5px",
                            }}
                          />
                        </Grid>
                      </Col>
                      <Col xs={6} mb={3}>
                        <Grid
                          item
                          xs={12}
                          sm={5.8}
                          style={{
                            alignSelf: "center",
                          }}
                        >
                          <CustomTextField
                            label={"Last Name"}
                            variant="standard"
                            margin="normal"
                            fullWidth
                            id="lastName"
                            name="lastName"
                            placeholder="Last Name"
                            value={formik.values.lastName}
                            onChange={(event) => {
                              const inputValue = event.target.value;
                              if (start_space_Validation.test(inputValue)) {
                                formik.setFieldValue("lastName", inputValue);
                              }
                            }}
                            error={
                              formik.touched.lastName &&
                              Boolean(formik.errors.lastName)
                            }
                            helperText={
                              formik.touched.lastName && formik.errors.lastName
                            }
                            InputProps={{
                              disableUnderline: true,
                              style: {
                                marginTop: "30px",
                              },
                            }}
                            InputLabelProps={{
                              shrink: true,
                              style: lable_text,
                            }}
                            inputProps={{
                              style: {
                                ...input_text,
                                border:
                                  formik.touched.lastName &&
                                  Boolean(formik.errors.lastName)
                                    ? "solid 1px #DC143C"
                                    : "solid 1px rgba(66, 70, 81, 0.2)",
                              },
                            }}
                            style={{
                              margin: "0px",
                              borderRadius: "5px",
                            }}
                          />
                        </Grid>
                      </Col>
                    </Row>

                    <Row pt={1}>
                      <Grid
                        item
                        xs={12}
                        sm={5.8}
                        style={{
                          alignSelf: "center",
                          marginTop: "15px",
                        }}
                      >
                        <CustomTextField
                          label={"City Name"}
                          variant="standard"
                          margin="normal"
                          fullWidth
                          id="city"
                          name="city"
                          placeholder="City Name"
                          value={formik.values.city}
                          onChange={(event) => {
                            const inputValue = event.target.value;
                            if (start_space_Validation.test(inputValue)) {
                              formik.setFieldValue("city", inputValue);
                            }
                          }}
                          error={
                            formik.touched.city && Boolean(formik.errors.city)
                          }
                          helperText={formik.touched.city && formik.errors.city}
                          InputProps={{
                            disableUnderline: true,
                            style: {
                              marginTop: "30px",
                            },
                          }}
                          InputLabelProps={{
                            shrink: true,
                            // <-- Add your label style here
                            style: lable_text,
                          }}
                          inputProps={{
                            style: {
                              ...input_text,
                              border:
                                formik.touched.city &&
                                Boolean(formik.errors.city)
                                  ? "solid 1px #DC143C"
                                  : "solid 1px rgba(66, 70, 81, 0.2)",
                            },
                          }}
                          style={{
                            margin: "0px",
                            borderRadius: "5px",
                          }}
                        />
                      </Grid>
                    </Row>

                    <Row pt={1}>
                      <Grid
                        item
                        xs={12}
                        sm={5.8}
                        style={{
                          alignSelf: "center",
                          marginTop: "15px",
                        }}
                      >
                        <CustomTextField
                          label={"Phone Number"}
                          margin="normal"
                          fullWidth
                          id="cellNo"
                          name="cellNo"
                          placeholder="Phone Number"
                          value={`${formik.values.cellNo}`}
                          onChange={(event) => {
                            const inputValue = event.target.value;
                            if (start_space_Validation.test(inputValue)) {
                              formik.setFieldValue("cellNo", inputValue);
                            }
                          }}
                          variant="standard"
                          InputProps={{
                            disableUnderline: true,
                            style: {
                              borderRadius: "15px",
                              // display: "flex",
                              // alignItems: "center",
                              marginTop: "25px",
                              border:
                                formik.touched.cellNo &&
                                Boolean(formik.errors.cellNo)
                                  ? "solid 1px #DC143C"
                                  : "solid 1px rgba(66, 70, 81, 0.2)",
                            },
                            startAdornment: (
                              <div
                                onClick={handleCountryCodeClick}
                                style={{
                                  cursor: "pointer",

                                  justifyContent: "center",
                                  display: "flex",
                                  paddingLeft: "30px",
                                  paddingRight: "5px",
                                }}
                              >
                                {selectedCountry && (
                                  <>
                                    <Typography
                                      style={{
                                        fontSize: 30,
                                        textAlign: "center",
                                        fontFamily: "Poppins",
                                      }}
                                    >
                                      {selectedCountry.flag}
                                    </Typography>
                                    <img
                                      src={IMAGES.DOWN}
                                      alt="up"
                                      style={{
                                        width: "10px",
                                        height: "10px",
                                        alignSelf: "center",
                                      }}
                                    />
                                    <Typography
                                      style={{
                                        fontSize: "16px",
                                        textAlign: "center",
                                        marginLeft: "20px",
                                        fontFamily: "Poppins",
                                        alignSelf: "center",
                                        color: "#424651",
                                      }}
                                    >
                                      {selectedCountry.dial_code}
                                    </Typography>
                                  </>
                                )}
                              </div>
                            ),
                          }}
                          InputLabelProps={{
                            shrink: true,
                            style: {
                              ...lable_text,
                            },
                          }}
                          inputProps={{
                            style: {
                              ...input_text,
                              border: "none",
                            },
                          }}
                          style={{
                            padding: "0px",
                            margin: "0px",
                          }}
                        />
                        {formik.touched.cellNo &&
                        Boolean(formik.errors.cellNo) ? (
                          <span
                            style={{
                              color: "#DC143C",
                              fontSize: "12px",
                              // backgroundColor: "red",
                            }}
                          >
                            {formik.touched.cellNo && formik.errors.cellNo}
                          </span>
                        ) : null}
                        {/* Render the country options */}
                        <Dialog
                          open={showModal}
                          onClose={handleCloseModal}
                          scroll="paper"
                        >
                          <DialogTitle>Country Options</DialogTitle>
                          <DialogContent
                            dividers
                            style={{ minHeight: "690px", minWidth: "700px" }}
                          >
                            <TextField
                              label="Search Country"
                              variant="standard"
                              value={searchValue}
                              onChange={handleSearchChange}
                              fullWidth
                              style={{ width: "84%" }}
                            />
                            {filteredCountries.map((country, index) => (
                              <MenuItem
                                key={country.code}
                                value={country}
                                style={{ width: "100%" }}
                                onClick={() => {
                                  handleCountryChange(country.code);
                                }}
                              >
                                <Typography
                                  style={{
                                    marginRight: "15px",
                                    fontSize: "20px",
                                  }}
                                >
                                  {country.flag}{" "}
                                </Typography>
                                {country.name.en}
                              </MenuItem>
                            ))}
                          </DialogContent>
                          <DialogActions>
                            <Button onClick={handleCloseModal}>Close</Button>
                          </DialogActions>
                        </Dialog>
                      </Grid>
                    </Row>

                    <Row pt={1}>
                      <Grid
                        item
                        xs={12}
                        sm={5.8}
                        style={{
                          alignSelf: "center",
                          marginTop: "15px",
                        }}
                      >
                        <CustomTextField
                          label={"E-mail"}
                          margin="normal"
                          fullWidth
                          id="email"
                          name="email"
                          placeholder="Email"
                          value={formik.values.email}
                          onChange={(event) => {
                            const inputValue = event.target.value;
                            if (start_space_Validation.test(inputValue)) {
                              formik.setFieldValue("email", inputValue);
                            }
                          }}
                          error={
                            formik.touched.email && Boolean(formik.errors.email)
                          }
                          helperText={
                            formik.touched.email && formik.errors.email
                          }
                          variant="standard"
                          InputProps={{
                            disableUnderline: true,
                            style: {
                              marginTop: "30px",
                            },
                          }}
                          InputLabelProps={{
                            shrink: true,
                            style: lable_text,
                          }}
                          inputProps={{
                            style: {
                              ...input_text,
                              border:
                                formik.touched.email &&
                                Boolean(formik.errors.email)
                                  ? "solid 1px #DC143C"
                                  : "solid 1px rgba(66, 70, 81, 0.2)",
                            },
                          }}
                          style={{
                            padding: "0px",
                            margin: "0px",
                          }}
                        />
                      </Grid>
                    </Row>

                    {/* <div className="d-flex justify-content-start">
                    <a href="#!">
                      <i className="fab fa-facebook me-3" />
                      <img
                        src={IMAGES.ADD_FILES}
                        alt="img"
                        style={{ width: "100px", height: "100px" }}
                      />
                    </a>
                    <a href="#!">
                      <i className="fab fa-twitter me-3" />
                      <img
                        src={IMAGES.ADD_FILES}
                        alt="img"
                        style={{ width: "100px", height: "100px" }}
                      />
                    </a>
                    <a href="#!">
                      <i className="fab fa-instagram me-3" />
                      <img
                        src={IMAGES.ADD_FILES}
                        alt="img"
                        style={{ width: "100px", height: "100px" }}
                      />
                    </a>
                  </div> */}

                    {/* </div> */}
                    <Row
                      style={{
                        // backgroundColor: "red",
                        display: `flex`,
                        justifyContent: `flex-end`,
                        alignContent: `flex-end`,
                        alignItems: `flex-end`,
                        alignSelf: `flex-end`,
                        marginTop: "45px",
                      }}
                    >
                      <ButtonContained
                        variant="contained"
                        size="large"
                        color="primary"
                        type="submit"
                        // onClick={fns.handleButtonClick}
                        style={{ ...ButtonContainedSpring }}
                      >
                        Save
                      </ButtonContained>
                    </Row>
                  </Card.Body>
                </Col>
              </Row>
            </Container>
          </Col>
        </Row>
      </form>
      {/* <TypeQuest
        onMouseLeave={() => {
          TypeQuestApi.start({ transform: "scale(1)" });
        }}
        onMouseEnter={() => {
          TypeQuestApi.start({ ...{ transform: "scale(1.05)" }, delay: 0 });
        }}
        //   className={props.className}
        style={{ ...TypeQuestSpring }}
      > */}
      {/* <ImageFrame>
        <Tooltip
          arrow={true}
          placement={"top"}
          title={"Click to view boat details"}
        >
          <Image1
            style={{
              ...Image1Spring,
              backgroundImage: `url(${profile_image ?? IMAGES.APP_ICON})`,
              backgroundSize: profile_image ? "cover" : "contain",
            }}
          ></Image1>
        </Tooltip>
      </ImageFrame> */}
      {/* <Content>
        <Details>
          <TitleTop>
            <Title style={{ ...TitleSpring }}>{boatName}</Title>

            <Q3Dots style={{ ...Q3DotsSpring }}>
              <Rectangle1></Rectangle1>
              <Rectangle2></Rectangle2>
              <Rectangle3></Rectangle3>
            </Q3Dots>
          </TitleTop>
          <TitleTop>
            <SubTitle style={{ ...TitleSpring }}>{marine_city}</SubTitle>

            <Q3Dots style={{ ...Q3DotsSpring }}>
              <Rectangle1></Rectangle1>
              <Rectangle2></Rectangle2>
              <Rectangle3></Rectangle3>
            </Q3Dots>
          </TitleTop>
          <Details1 style={{ ...Details1Spring }}>
            <StarRating rating={starRating} />
          </Details1>
          <ButtonContained
            variant="contained"
            size="large"
            // color="primary"
            // onClick={fns.handleButtonClick}
            style={{ ...ButtonContainedSpring }}
          >
            {" "}
            BOOK ME{" "}
          </ButtonContained>

          <Details1
            style={{
              ...ButtonContainedSpring,
              display: "flex",
              flexDirection: "row",
              justifyContent: "space-between",
            }}
          >
            <div style={{ display: "flex", flexDirection: "row" }}>
              <Image1
                style={{
                  ...Image1Spring,
                  backgroundImage: `url(${IMAGES.MONEY_CARD})`,
                  width: "28px",
                  height: "30px",
                  alignSelf: "center",
                  alignContent: "center",
                  alignItems: "center",
                }}
              />
              <Details1
                style={{
                  ...ButtonContainedSpring,
                  textAlign: "center",
                  alignSelf: "center",
                  fontSize: "16px",
                  fontWeight: "600",
                  margin: `0px 0px 0px 15px`,
                }}
              >
                {pricePerHour} {priceCurrency}
              </Details1>
            </div>
            <div style={{ display: "flex", flexDirection: "row" }}>
              <Image1
                style={{
                  ...Image1Spring,
                  backgroundImage: `url(${IMAGES.GROUP})`,
                  width: 36,
                  height: 25,
                  alignSelf: "center",
                  alignContent: "center",
                  alignItems: "center",
                }}
              />
              <Details1
                style={{
                  ...ButtonContainedSpring,
                  textAlign: "center",
                  alignSelf: "center",
                  fontSize: "16px",
                  fontWeight: "600",
                  margin: `0px 0px 0px 15px`,
                }}
              >
                {boatMaxCapacity}
              </Details1>
            </div>
          </Details1>
        </Details>
      </Content> */}
      {/* <section
        className="card"
        style={{
          // width: "100%",
          // backgroundColor: "red",
          marginTop: "55px",
          borderColor: "white",
          marginBottom: "100px",
        }}
      > */}
      {/* <Container
        fluid
        style={{
          width: "100%",
          margin: "0px",
          padding: "0px",
        }}
      > */}

      {/* </Container> */}
      {/* </section> */}
      {/* </TypeQuest> */}
    </>
  );
};

const input_text = {
  fontSize: "18px",
  fontFamily: "Poppins",
  fontWeight: "600",
  fontStretch: "normal",
  fontStyle: "normal",
  lineHeight: 1.5,
  letterSpacing: "normal",
  textAlign: "left",
  color: "#424651",
  // backgroundColor: "red",
  // padding: "18px 28px",
  padding: "10px 20px",
  boxShadow: "0px 0px 2px rgba(0, 0, 0, 0.09)",
  border: "solid 1px rgba(66, 70, 81, 0.2)",
  borderRadius: "15px",
  backgroundColor: "#fff",
};

const lable_text = {
  fontSize: "20px",
  fontFamily: "Poppins",
  fontWeight: "600",
  // fontWeight: "normal",
  fontStretch: "normal",
  fontStyle: "normal",
  lineHeight: 1.56,
  letterSpacing: "normal",
  textAlign: "left",
  // color: "#424651",
  color: "dimgray",
};
